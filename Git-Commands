1) To revert one file back
    git checkout <commit-id> <file/to/restore>
	
	------------------------------------------

2) List all commits for a specific file
	git log --follow filename
	
			or
	git log --follow --oneline <file-name>
	
3) To know what we did in the last commit:
	git show HEAD 
	
	------------------------------------------
	
4) Undo git add before 'commit'
	'git reset <file>' undo a single file
	
	'git reset .' all the due changes

	------------------------------------------
5) Remove untracked files (Whicj are not added) from the whole respository
	'git clean -fdx'
	
	 To perform a dry run of git clean 
	'git clean -n'
	
	Remove untracked files but limit it to the specific path
	'git clean -df'
	
	NOTE: In the all above cases -f(force) option is required if "clean.requireForce" configuration option is set to false (it's true by default). This will not remove untracked folders or files specified by .gitignore.
	
	Remove files but not directories
	'git remove -xf'
	
	Exclude files from git-clean by -e option
	'git clean -df *.log -e *.txt'
	
	
	------------------------------------------

6) git checkout command serves  three distinct functions:
		ii)  Checking out commits
		i)   Checking out files
		iii) Checking out branches
	
	------------------------------------------
7)touch test.txt
  touch sample.txt
  
  #git status
  #git add .
  
   To comeback from staging to Wworking Directory
  #git reset .
  #git reset test.txt (For test.txt only)
  #git reset sample.txt (For sample.txt only)
  
  #git add . ; git commit -m "msg"
   To comeback from commit to staging:
   git reset --soft HEAD^1
   
 8) git checkout <branch> -f
 -f option reemoves all the uncommited changes
    git checkout with uncommited changes won't take your HAED to next branch but will throw an error
    
 
