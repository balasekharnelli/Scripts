1) To revert one file back
    git checkout <commit-id> <file/to/restore>
	
	------------------------------------------

2) List all commits for a specific file
	git log --follow filename
	
			or
	git log --follow --oneline <file-name>
	
3) To know what we did in the last commit:
	git show HEAD 
	
	------------------------------------------
	
4) Undo git add before 'commit'
	'git reset <file>' undo a single file
	
	'git reset .' all the due changes

	------------------------------------------
5) Remove untracked files (Whicj are not added) from the whole respository
	'git clean -fdx'
	
	To perform a dry run of git clean 
	'git clean -n'
	
	Remove untracked files but limit it to the specific path
	'git clean -df'
	
	NOTE: In the all above cases -f(force) option is required if "clean.requireForce" configuration option is set to false (it's true by default). This will not remove untracked folders or files specified by .gitignore.
	
	Remove files but not directories
	'git remove -xf'
	
	Exclude files from git-clean by -e option
	'git clean -df *.log -e *.txt'
	
	
	------------------------------------------

6) git checkout command serves  three distinct functions:
		ii)  Checking out commits
		i)   Checking out files
		iii) Checking out branches
	
	------------------------------------------
7)touch test.txt
  touch sample.txt
  
  #git status
  #git add .
  
   To comeback from staging to Working Directory
  #git reset .
  #git reset test.txt (For test.txt only)
  #git reset sample.txt (For sample.txt only)
  
  #git add . ; git commit -m "msg"
   To comeback from commit to staging:
   git reset --soft HEAD^1
   
 8) git checkout <branch> -f
 -f option reemoves all the uncommited changes
    git checkout with uncommited changes won't take your HAED to next branch but will throw an error
    
 9) As we have seen 'git checkout <branch> -f' will remove all uncommitted changes. 
 So, if wanna move to other branch from current branch by not distrubing local changes use the follwoing command:
 'git stash' and then do the 'git checkout branch'. If you come back to previous branch run 'git stash pop' command to revert the changes.
    
 
10) 'git checkout HEAD^3' This command goes 3 commits back and creates no branch. We can play here and do stuff. If we wanna create branches
out of the commits made(if any) we can create by the follwoing command.
#git checkout -b <branchname>
Being here and if we change to branch we will ,oose all the commits.
Conclusion: If you want to go few commits back and play with code, this is useful. And if turned interesting and if you want to create branch
out of it, we can do it. 


11)'git revert HEAD~2' git revert undoes a commit by creating new commit.


12) 'git cherry-pick'
Cherry picking in git means to choose a commit from one branch and apply it onto another.

13) Remove branch from remote
  git push origin :<branch>

14) Remove branch from local 
  git branch -d <branch_name>
  git branch -D <branch_name> [forcefully]
  


